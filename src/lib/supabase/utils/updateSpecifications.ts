import { supabase } from '@/lib/supabaseClient';
import { CategoryTemplateService } from '../services/categoryTemplateService';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
 */
export class SpecificationUpdater {
  
  /**
   * –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
   */
  static async updateAllTemplates() {
    console.log('üîß Updating specification templates...');
    
    try {
      // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è GPU
      await this.cleanupGpuTemplates();
      
      // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
      await CategoryTemplateService.initializeCategoryTemplates();
      
      // 3. –û–±–Ω–æ–≤–ª—è–µ–º auto_generated_specs –≤ categories
      await this.updateAutoGeneratedSpecs();
      
      console.log('‚úÖ All templates updated successfully!');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå Failed to update templates:', error);
      return { success: false, error };
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ GPU
   */
  private static async cleanupGpuTemplates() {
    console.log('üßπ Cleaning up old GPU templates...');
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
    const { data: gpuCategory } = await supabase
      .from('categories')
      .select('id')
      .eq('slug', 'graphics-cards')
      .single();
      
    if (!gpuCategory) {
      throw new Error('GPU category not found');
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ power_consumption
    const { error } = await supabase
      .from('category_specification_templates')
      .delete()
      .eq('category_id', gpuCategory.id)
      .eq('name', 'power_consumption');
      
    if (error) {
      console.error('Error deleting old power_consumption template:', error);
    } else {
      console.log('‚úÖ Old power_consumption template removed');
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ auto_generated_specs –≤ —Ç–∞–±–ª–∏—Ü–µ categories
   */
  private static async updateAutoGeneratedSpecs() {
    console.log('üìù Updating auto_generated_specs...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PC –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categories } = await supabase
      .from('categories')
      .select('id, slug')
      .eq('is_pc_component', true);
      
    if (!categories) return;
    
    for (const category of categories) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const templates = await CategoryTemplateService.getTemplatesForCategory(category.slug);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç auto_generated_specs
        const autoGeneratedSpecs = templates.map(template => ({
          name: template.name,
          displayName: template.display_name,
          dataType: template.data_type,
          isRequired: template.is_required,
          isCompatibilityKey: template.is_compatibility_key,
          displayOrder: template.display_order,
          units: template.units,
          minValue: template.min_value,
          maxValue: template.max_value,
          enumValues: template.enum_values,
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º auto_generated_specs
        const { error } = await supabase
          .from('categories')
          .update({ 
            auto_generated_specs: autoGeneratedSpecs,
            smart_detection_enabled: true,
            last_profile_detection: new Date().toISOString()
          })
          .eq('id', category.id);
          
        if (error) {
          console.error(`Error updating ${category.slug}:`, error);
        } else {
          console.log(`‚úÖ Updated auto_generated_specs for ${category.slug}`);
        }
        
      } catch (error) {
        console.error(`Error processing ${category.slug}:`, error);
      }
    }
  }
  
  /**
   * –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ GPU —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
   */
  static async updateGpuSpecsOnly() {
    console.log('üéÆ Updating GPU specifications only...');
    
    try {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã GPU
      await this.cleanupGpuTemplates();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã (–≤–∫–ª—é—á–∞—è GPU)
      await CategoryTemplateService.initializeCategoryTemplates();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º auto_generated_specs –¥–ª—è GPU
      const { data: gpuCategory } = await supabase
        .from('categories')
        .select('id')
        .eq('slug', 'graphics-cards')
        .single();
        
      if (gpuCategory) {
        const templates = await CategoryTemplateService.getTemplatesForCategory('graphics-cards');
        const autoGeneratedSpecs = templates.map(template => ({
          name: template.name,
          displayName: template.display_name,
          dataType: template.data_type,
          isRequired: template.is_required,
          isCompatibilityKey: template.is_compatibility_key,
          displayOrder: template.display_order,
          units: template.units,
          minValue: template.min_value,
          maxValue: template.max_value,
        }));
        
        await supabase
          .from('categories')
          .update({ auto_generated_specs: autoGeneratedSpecs })
          .eq('id', gpuCategory.id);
      }
      
      console.log('‚úÖ GPU specifications updated successfully!');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå Failed to update GPU specs:', error);
      return { success: false, error };
    }
  }
}