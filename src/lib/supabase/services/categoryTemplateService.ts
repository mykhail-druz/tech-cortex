// src/lib/supabase/services/categoryTemplateService.ts
import { supabase } from '../../supabaseClient';
import {
  CategorySpecificationTemplate,
  SpecificationDataType,
  SocketType,
  MemoryType,
  ChipsetType,
  FormFactor,
} from '../types/specifications';

/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export class CategoryTemplateService {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π PC
   */
  static async initializeCategoryTemplates() {
    console.log('üîß Initializing category specification templates...');

    // 1. –ü–†–û–¶–ï–°–°–û–†–´
    await this.createProcessorTemplates();

    // 2. –ú–ê–¢–ï–†–ò–ù–°–ö–ò–ï –ü–õ–ê–¢–´
    await this.createMotherboardTemplates();

    // 3. –ü–ê–ú–Ø–¢–¨
    await this.createMemoryTemplates();

    // 4. –í–ò–î–ï–û–ö–ê–†–¢–´
    await this.createGpuTemplates();

    // 5. –ë–õ–û–ö–ò –ü–ò–¢–ê–ù–ò–Ø
    await this.createPsuTemplates();

    // 6. –ö–û–†–ü–£–°–ê
    await this.createCaseTemplates();

    // 7. –ù–ê–ö–û–ü–ò–¢–ï–õ–ò
    await this.createStorageTemplates();

    // 8. –û–•–õ–ê–ñ–î–ï–ù–ò–ï
    await this.createCoolingTemplates();

    console.log('‚úÖ All category templates initialized!');
  }

  /**
   * –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
   */
  private static async createProcessorTemplates() {
    const { data: cpuCategory } = await supabase
      .from('categories')
      .select('id')
      .eq('slug', 'processors')
      .single();

    if (!cpuCategory) {
      console.error('‚ùå CPU category not found');
      return;
    }

    const templates = [
      {
        category_id: cpuCategory.id,
        name: 'socket',
        display_name: '–°–æ–∫–µ—Ç',
        description: '–¢–∏–ø —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        is_required: true,
        data_type: SpecificationDataType.ENUM,
        enum_values: Object.values(SocketType),
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 1,
      },
      {
        category_id: cpuCategory.id,
        name: 'cores',
        display_name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä',
        description: '–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä',
        is_required: true,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: false,
        is_filterable: true,
        filter_type: 'range' as const,
        display_order: 2,
        min_value: 2,
        max_value: 32,
      },
      {
        category_id: cpuCategory.id,
        name: 'threads',
        display_name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤',
        description: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤',
        is_required: true,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: false,
        is_filterable: true,
        filter_type: 'range' as const,
        display_order: 3,
        min_value: 2,
        max_value: 64,
      },
      {
        category_id: cpuCategory.id,
        name: 'base_clock',
        display_name: '–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞',
        description: '–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤ –ì–ì—Ü',
        is_required: true,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: false,
        is_filterable: true,
        filter_type: 'range' as const,
        display_order: 4,
        units: 'GHz',
        min_value: 1.0,
        max_value: 6.0,
      },
      {
        category_id: cpuCategory.id,
        name: 'boost_clock',
        display_name: '–¢—É—Ä–±–æ —á–∞—Å—Ç–æ—Ç–∞',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—É—Ä–±–æ —á–∞—Å—Ç–æ—Ç–∞ –≤ –ì–ì—Ü',
        is_required: false,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: false,
        is_filterable: true,
        filter_type: 'range' as const,
        display_order: 5,
        units: 'GHz',
        min_value: 1.0,
        max_value: 7.0,
      },
      {
        category_id: cpuCategory.id,
        name: 'tdp',
        display_name: 'TDP',
        description: '–¢–µ–ø–ª–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –≤–∞—Ç—Ç–∞—Ö',
        is_required: true,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: true, // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
        is_filterable: true,
        filter_type: 'range' as const,
        display_order: 6,
        units: 'W',
        min_value: 35,
        max_value: 400,
      },
      {
        category_id: cpuCategory.id,
        name: 'integrated_graphics',
        display_name: '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞',
        description: '–ù–∞–ª–∏—á–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞',
        is_required: false,
        data_type: SpecificationDataType.BOOLEAN,
        is_compatibility_key: false,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 7,
      },
    ];

    await this.insertTemplates(templates);
  }

  /**
   * –®–∞–±–ª–æ–Ω—ã –¥–ª—è –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç
   */
  private static async createMotherboardTemplates() {
    const { data: mbCategory } = await supabase
      .from('categories')
      .select('id')
      .eq('slug', 'motherboards')
      .single();

    if (!mbCategory) return;

    const templates = [
      {
        category_id: mbCategory.id,
        name: 'socket',
        display_name: '–°–æ–∫–µ—Ç',
        description: '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ–∫–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        is_required: true,
        data_type: SpecificationDataType.ENUM,
        enum_values: Object.values(SocketType),
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 1,
      },
      {
        category_id: mbCategory.id,
        name: 'chipset',
        display_name: '–ß–∏–ø—Å–µ—Ç',
        description: '–ú–æ–¥–µ–ª—å —á–∏–ø—Å–µ—Ç–∞',
        is_required: true,
        data_type: SpecificationDataType.ENUM,
        enum_values: Object.values(ChipsetType),
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 2,
      },
      {
        category_id: mbCategory.id,
        name: 'form_factor',
        display_name: '–§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä',
        description: '–†–∞–∑–º–µ—Ä –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã',
        is_required: true,
        data_type: SpecificationDataType.ENUM,
        enum_values: Object.values(FormFactor),
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 3,
      },
      {
        category_id: mbCategory.id,
        name: 'memory_type',
        display_name: '–¢–∏–ø –ø–∞–º—è—Ç–∏',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–∞–º—è—Ç–∏',
        is_required: true,
        data_type: SpecificationDataType.ENUM,
        enum_values: Object.values(MemoryType),
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 4,
      },
      {
        category_id: mbCategory.id,
        name: 'memory_slots',
        display_name: '–°–ª–æ—Ç—ã –ø–∞–º—è—Ç–∏',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
        is_required: true,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'checkbox' as const,
        display_order: 5,
        min_value: 2,
        max_value: 8,
      },
      {
        category_id: mbCategory.id,
        name: 'max_memory',
        display_name: '–ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –ø–∞–º—è—Ç–∏ –≤ –ì–ë',
        is_required: true,
        data_type: SpecificationDataType.NUMBER,
        is_compatibility_key: true,
        is_filterable: true,
        filter_type: 'range' as const,
        display_order: 6,
        units: 'GB',
        min_value: 32,
        max_value: 256,
      },
    ];

    await this.insertTemplates(templates);
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private static async insertTemplates(templates: any[]) {
    for (const template of templates) {
      const { error } = await supabase.from('category_specification_templates').upsert(template, {
        onConflict: 'category_id,name',
      });

      if (error) {
        console.error('‚ùå Error inserting template:', template.name, error);
      } else {
        console.log('‚úÖ Template created:', template.name);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  static async getTemplatesForCategory(categorySlug: string) {
    const { data: category } = await supabase
      .from('categories')
      .select('id')
      .eq('slug', categorySlug)
      .single();

    if (!category) return [];

    const { data: templates } = await supabase
      .from('category_specification_templates')
      .select('*')
      .eq('category_id', category.id)
      .order('display_order');

    return templates || [];
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
   */
  static validateSpecification(
    template: CategorySpecificationTemplate,
    value: any
  ): { isValid: boolean; error?: string } {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (template.is_required && (value === null || value === undefined || value === '')) {
      return { isValid: false, error: `${template.display_name} —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º` };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    switch (template.data_type) {
      case SpecificationDataType.NUMBER:
        if (isNaN(Number(value))) {
          return { isValid: false, error: `${template.display_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º` };
        }
        const numValue = Number(value);
        if (template.min_value && numValue < template.min_value) {
          return {
            isValid: false,
            error: `${template.display_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= ${template.min_value}`,
          };
        }
        if (template.max_value && numValue > template.max_value) {
          return {
            isValid: false,
            error: `${template.display_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <= ${template.max_value}`,
          };
        }
        break;

      case SpecificationDataType.ENUM:
        if (template.enum_values && !template.enum_values.includes(value)) {
          return {
            isValid: false,
            error: `${template.display_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: ${template.enum_values.join(', ')}`,
          };
        }
        break;

      case SpecificationDataType.BOOLEAN:
        if (typeof value !== 'boolean' && value !== 'true' && value !== 'false') {
          return { isValid: false, error: `${template.display_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true/false` };
        }
        break;
    }

    return { isValid: true };
  }
}
