import { supabase } from '@/lib/supabaseClient';
import {
  Product,
  ProductSpecification,
  CategorySpecificationTemplate,
} from '@/lib/supabase/types/types';
import {
  SpecificationValidator,
  SpecificationValidationResult,
  TypedSpecificationValue,
  SpecificationDataType,
} from '@/lib/supabase/types/specifications';
import { TemplateService } from './templateService';

/**
 * üéØ –°–ï–†–í–ò–° –°–û–ó–î–ê–ù–ò–Ø –¢–û–í–ê–†–û–í –° –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ú–ò –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø–ú–ò
 * –°–æ–∑–¥–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export class ProductSpecificationService {
  /**
   * ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –° –í–ê–õ–ò–î–ò–†–û–í–ê–ù–ù–´–ú–ò –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø–ú–ò
   */
  static async createProductWithSpecifications(
    productData: Omit<Product, 'id' | 'created_at' | 'updated_at'>,
    specifications: Record<string, any> // –ö–ª—é—á = template.name, –∑–Ω–∞—á–µ–Ω–∏–µ = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
  ): Promise<{
    success: boolean;
    productId?: string;
    specificationsCreated?: number;
    errors?: string[];
    warnings?: string[];
    validationDetails?: Record<string, SpecificationValidationResult>;
  }> {
    try {
      console.log(`üèóÔ∏è Creating product: ${productData.title}`);
      console.log(`üìã With specifications:`, Object.keys(specifications));

      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
      const categoryId = productData.subcategory_id || productData.category_id;
      if (!categoryId) {
        return {
          success: false,
          errors: ['–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞'],
        };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–ª–µ–π—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const templatesResult = await TemplateService.getTemplatesForCategory(categoryId);
      if (!templatesResult.success || !templatesResult.templates) {
        return {
          success: false,
          errors: templatesResult.errors || ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
        };
      }

      const templates = templatesResult.templates;
      console.log(`üìù Found ${templates.length} templates for category`);

      // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const validationResult = await this.validateProductSpecifications(specifications, templates);

      if (!validationResult.success) {
        return {
          success: false,
          errors: validationResult.errors,
          warnings: validationResult.warnings,
          validationDetails: validationResult.validationDetails,
        };
      }

      // 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
      const { data: product, error: productError } = await supabase
        .from('products')
        .insert(productData)
        .select()
        .single();

      if (productError) {
        console.error('‚ùå Product creation failed:', productError);
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${productError.message}`],
        };
      }

      console.log(`‚úÖ Product created with ID: ${product.id}`);

      // 5. –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const specificationsResult = await this.createProductSpecifications(
        product.id,
        validationResult.normalizedSpecifications!,
        templates
      );

      if (!specificationsResult.success) {
        // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        await supabase.from('products').delete().eq('id', product.id);
        return {
          success: false,
          errors: specificationsResult.errors || ['–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π'],
        };
      }

      return {
        success: true,
        productId: product.id,
        specificationsCreated: specificationsResult.specificationsCreated,
        warnings: validationResult.warnings,
        validationDetails: validationResult.validationDetails,
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in createProductWithSpecifications:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô –ü–†–û–î–£–ö–¢–ê
   */
  private static async validateProductSpecifications(
    specifications: Record<string, any>,
    templates: CategorySpecificationTemplate[]
  ): Promise<{
    success: boolean;
    errors?: string[];
    warnings?: string[];
    validationDetails?: Record<string, SpecificationValidationResult>;
    normalizedSpecifications?: Record<string, TypedSpecificationValue>;
  }> {
    const errors: string[] = [];
    const warnings: string[] = [];
    const validationDetails: Record<string, SpecificationValidationResult> = {};
    const normalizedSpecifications: Record<string, TypedSpecificationValue> = {};

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const templateMap = new Map<string, CategorySpecificationTemplate>();
    templates.forEach(template => {
      templateMap.set(template.name, template);
    });

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredTemplates = templates.filter(t => t.is_required);
    for (const template of requiredTemplates) {
      if (
        !(template.name in specifications) ||
        specifications[template.name] === null ||
        specifications[template.name] === undefined ||
        specifications[template.name] === ''
      ) {
        errors.push(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è "${template.display_name}" –Ω–µ —É–∫–∞–∑–∞–Ω–∞`);
      }
    }

    // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    const allSpecificationNames = new Set([
      ...Object.keys(specifications),
      ...templates.map(t => t.name),
    ]);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationContext: Record<string, TypedSpecificationValue> = {};

    // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    for (const specName of allSpecificationNames) {
      const template = templateMap.get(specName);
      const value = specifications[specName];

      if (!template) {
        if (value !== undefined && value !== null && value !== '') {
          warnings.push(`–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è "${specName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–º–ø–ª–µ–π—Ç–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
        }
        continue;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!template.is_required && (value === undefined || value === null || value === '')) {
        continue;
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      const validationResult = SpecificationValidator.validateAndNormalize(
        value,
        template.validation_rules
      );

      validationDetails[specName] = validationResult;

      if (!validationResult.isValid) {
        errors.push(`${template.display_name}: ${validationResult.errors.join(', ')}`);
      } else {
        normalizedSpecifications[specName] = validationResult.normalizedValue;
        validationContext[specName] = validationResult.normalizedValue;
      }

      if (validationResult.warnings.length > 0) {
        warnings.push(`${template.display_name}: ${validationResult.warnings.join(', ')}`);
      }
    }

    // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è compatibility_key –ø–æ–ª–µ–π
    const compatibilityTemplates = templates.filter(t => t.is_compatibility_key);
    for (const template of compatibilityTemplates) {
      const value = specifications[template.name];

      if (value !== undefined && value !== null && value !== '') {
        const validationResult = SpecificationValidator.validateAndNormalize(
          value,
          template.validation_rules,
          validationContext
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validationDetails[template.name] = validationResult;

        if (!validationResult.isValid) {
          // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ (—Å –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
          const existingErrorIndex = errors.findIndex(e =>
            e.startsWith(`${template.display_name}:`)
          );
          const newError = `${template.display_name}: ${validationResult.errors.join(', ')}`;

          if (existingErrorIndex >= 0) {
            errors[existingErrorIndex] = newError;
          } else {
            errors.push(newError);
          }
        }

        if (validationResult.warnings.length > 0) {
          warnings.push(`${template.display_name}: ${validationResult.warnings.join(', ')}`);
        }
      }
    }

    return {
      success: errors.length === 0,
      errors: errors.length > 0 ? errors : undefined,
      warnings: warnings.length > 0 ? warnings : undefined,
      validationDetails,
      normalizedSpecifications,
    };
  }

  /**
   * üíæ –°–û–ó–î–ê–ù–ò–ï –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô –ü–†–û–î–£–ö–¢–ê –í –ë–î
   */
  private static async createProductSpecifications(
    productId: string,
    normalizedSpecifications: Record<string, TypedSpecificationValue>,
    templates: CategorySpecificationTemplate[]
  ): Promise<{
    success: boolean;
    specificationsCreated?: number;
    errors?: string[];
  }> {
    try {
      const templateMap = new Map<string, CategorySpecificationTemplate>();
      templates.forEach(template => {
        templateMap.set(template.name, template);
      });

      const specInserts: Omit<ProductSpecification, 'id' | 'created_at' | 'updated_at'>[] = [];

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      for (const [specName, normalizedValue] of Object.entries(normalizedSpecifications)) {
        const template = templateMap.get(specName);
        if (!template) continue;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è value
        let mainValue = '';
        if (normalizedValue.enumValue) {
          mainValue = normalizedValue.enumValue;
        } else if (normalizedValue.numberValue !== undefined) {
          mainValue = `${normalizedValue.numberValue}${normalizedValue.unit ? ' ' + normalizedValue.unit : ''}`;
        } else if (normalizedValue.booleanValue !== undefined) {
          mainValue = normalizedValue.booleanValue ? 'true' : 'false';
        } else if (normalizedValue.textValue) {
          mainValue = normalizedValue.textValue;
        }

        const specData: Omit<ProductSpecification, 'id' | 'created_at' | 'updated_at'> = {
          product_id: productId,
          template_id: template.id,
          name: template.name,
          value: mainValue,
          display_order: template.display_order || 0,

          // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          value_enum: normalizedValue.enumValue || null,
          value_number: normalizedValue.numberValue || null,
          value_text: normalizedValue.textValue || null,
          value_boolean: normalizedValue.booleanValue || null,
        };

        specInserts.push(specData);
      }

      if (specInserts.length === 0) {
        return {
          success: true,
          specificationsCreated: 0,
        };
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ë–î
      const { error } = await supabase.from('product_specifications').insert(specInserts);

      if (error) {
        console.error('‚ùå Specifications creation failed:', error);
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: ${error.message}`],
        };
      }

      console.log(`‚úÖ Created ${specInserts.length} specifications`);

      return {
        success: true,
        specificationsCreated: specInserts.length,
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in createProductSpecifications:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô –ü–†–û–î–£–ö–¢–ê
   */
  static async updateProductSpecifications(
    productId: string,
    specifications: Record<string, any>
  ): Promise<{
    success: boolean;
    specificationsUpdated?: number;
    errors?: string[];
    warnings?: string[];
  }> {
    try {
      console.log(`üîÑ Updating specifications for product: ${productId}`);

      // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data: product, error: productError } = await supabase
        .from('products')
        .select('subcategory_id, category_id')
        .eq('id', productId)
        .single();

      if (productError || !product) {
        return {
          success: false,
          errors: ['–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'],
        };
      }

      const categoryId = product.subcategory_id || product.category_id;

      // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–ª–µ–π—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const templatesResult = await TemplateService.getTemplatesForCategory(categoryId);
      if (!templatesResult.success || !templatesResult.templates) {
        return {
          success: false,
          errors: templatesResult.errors || ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
        };
      }

      // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const validationResult = await this.validateProductSpecifications(
        specifications,
        templatesResult.templates
      );

      if (!validationResult.success) {
        return {
          success: false,
          errors: validationResult.errors,
          warnings: validationResult.warnings,
        };
      }

      // 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { error: deleteError } = await supabase
        .from('product_specifications')
        .delete()
        .eq('product_id', productId);

      if (deleteError) {
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: ${deleteError.message}`],
        };
      }

      // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const createResult = await this.createProductSpecifications(
        productId,
        validationResult.normalizedSpecifications!,
        templatesResult.templates
      );

      if (!createResult.success) {
        return {
          success: false,
          errors: createResult.errors,
        };
      }

      return {
        success: true,
        specificationsUpdated: createResult.specificationsCreated,
        warnings: validationResult.warnings,
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in updateProductSpecifications:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô –ü–†–û–î–£–ö–¢–ê –° –¢–ï–ú–ü–õ–ï–ô–¢–ê–ú–ò
   */
  static async getProductSpecifications(productId: string): Promise<{
    success: boolean;
    specifications?: (ProductSpecification & { template?: CategorySpecificationTemplate })[];
    errors?: string[];
  }> {
    try {
      const { data: specifications, error } = await supabase
        .from('product_specifications')
        .select(
          `
          *,
          template:template_id (*)
        `
        )
        .eq('product_id', productId)
        .order('display_order', { ascending: true });

      if (error) {
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: ${error.message}`],
        };
      }

      return {
        success: true,
        specifications: specifications || [],
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in getProductSpecifications:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üéØ –ì–û–¢–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–†–ê
   */
  static async createProcessor(
    basicInfo: {
      title: string;
      slug: string;
      description?: string;
      price: number;
      brand?: string;
      sku?: string;
      subcategory_id: string;
    },
    specs: {
      socket: string; // 'AM4', 'LGA1700', etc.
      base_frequency: number; // –≤ MHz, –Ω–∞–ø—Ä–∏–º–µ—Ä 3200
      boost_frequency?: number; // –≤ MHz
      cores: number;
      threads: number;
      tdp: number; // –≤ Watts
    }
  ) {
    const productData: Omit<Product, 'id' | 'created_at' | 'updated_at'> = {
      ...basicInfo,
      old_price: null,
      discount_percentage: null,
      main_image_url: null,
      category_id: null,
      rating: 0,
      review_count: 0,
      in_stock: true,
    };

    return this.createProductWithSpecifications(productData, specs);
  }

  /**
   * üéØ –ì–û–¢–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ú–ê–¢–ï–†–ò–ù–°–ö–û–ô –ü–õ–ê–¢–´
   */
  static async createMotherboard(
    basicInfo: {
      title: string;
      slug: string;
      description?: string;
      price: number;
      brand?: string;
      sku?: string;
      subcategory_id: string;
    },
    specs: {
      socket: string; // 'AM4', 'LGA1700', etc.
      chipset: string; // 'B550', 'Z690', etc.
      memory_type: string; // 'DDR4', 'DDR5'
      memory_slots: number; // 2, 4, etc.
      max_memory: number; // –≤ GB
      form_factor: string; // 'ATX', 'Micro ATX', etc.
    }
  ) {
    const productData: Omit<Product, 'id' | 'created_at' | 'updated_at'> = {
      ...basicInfo,
      old_price: null,
      discount_percentage: null,
      main_image_url: null,
      category_id: null,
      rating: 0,
      review_count: 0,
      in_stock: true,
    };

    return this.createProductWithSpecifications(productData, specs);
  }
}
