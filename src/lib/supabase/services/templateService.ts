import { supabase } from '@/lib/supabaseClient';
import {
  CategorySpecificationTemplate,
  SpecificationDataType,
  SpecificationValidationRule,
  SpecificationValidator,
  SpecificationValidationResult,
  SPECIFICATION_ENUMS,
} from '@/lib/supabase/types/specifications';

/**
 * üéØ –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–ú–ü–õ–ï–ô–¢–ê–ú–ò –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô
 * –°–æ–∑–¥–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–ø–ª–µ–π—Ç–∞–º–∏
 */
export class TemplateService {
  /**
   * ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –¢–ï–ú–ü–õ–ï–ô–¢–ê –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô
   */
  static async createTemplate(templateData: Omit<CategorySpecificationTemplate, 'id'>): Promise<{
    success: boolean;
    templateId?: string;
    errors?: string[];
    warnings?: string[];
  }> {
    try {
      console.log(
        `üèóÔ∏è Creating template: ${templateData.name} for category ${templateData.category_id}`
      );

      // 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º–ø–ª–µ–π—Ç–∞
      const validation = this.validateTemplateData(templateData);
      if (!validation.isValid) {
        return {
          success: false,
          errors: validation.errors,
          warnings: validation.warnings,
        };
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const { data: existingTemplate } = await supabase
        .from('category_specification_templates')
        .select('id')
        .eq('category_id', templateData.category_id)
        .eq('name', templateData.name)
        .single();

      if (existingTemplate) {
        return {
          success: false,
          errors: [`–¢–µ–º–ø–ª–µ–π—Ç —Å –∏–º–µ–Ω–µ–º "${templateData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`],
        };
      }

      // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ–º–ø–ª–µ–π—Ç
      const { data: template, error } = await supabase
        .from('category_specification_templates')
        .insert(templateData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Template creation failed:', error);
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–∞: ${error.message}`],
        };
      }

      console.log(`‚úÖ Template created with ID: ${template.id}`);

      return {
        success: true,
        templateId: template.id,
        warnings: validation.warnings,
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in createTemplate:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –¢–ï–ú–ü–õ–ï–ô–¢–ê
   */
  private static validateTemplateData(templateData: Omit<CategorySpecificationTemplate, 'id'>): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!templateData.name || templateData.name.trim().length === 0) {
      errors.push('–ò–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (!templateData.display_name || templateData.display_name.trim().length === 0) {
      errors.push('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (!templateData.category_id) {
      errors.push('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
    if (templateData.name && !/^[a-zA-Z0-9_]+$/.test(templateData.name)) {
      errors.push('–ò–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è enum_values –¥–ª—è enum —Ç–∏–ø–æ–≤
    if (templateData.data_type === SpecificationDataType.ENUM) {
      if (!templateData.enum_values || templateData.enum_values.length === 0) {
        errors.push('–î–ª—è enum —Ç–∏–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è enum_source
    if (templateData.enum_source) {
      if (!(templateData.enum_source in SPECIFICATION_ENUMS)) {
        errors.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ enum: ${templateData.enum_source}`);
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è validation_rules
    if (!templateData.validation_rules) {
      errors.push('–ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    } else {
      const rulesValidation = this.validateValidationRules(
        templateData.validation_rules,
        templateData.data_type
      );
      errors.push(...rulesValidation.errors);
      warnings.push(...rulesValidation.warnings);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è filter_type –¥–ª—è —Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π
    if (templateData.is_filterable && !templateData.filter_type) {
      warnings.push('–î–ª—è —Ñ–∏–ª—å—Ç—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è display_order
    if (templateData.display_order !== undefined && templateData.display_order < 0) {
      warnings.push('–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
    };
  }

  /**
   * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–ê–í–ò–õ –í–ê–õ–ò–î–ê–¶–ò–ò
   */
  private static validateValidationRules(
    rules: SpecificationValidationRule,
    dataType: SpecificationDataType
  ): {
    errors: string[];
    warnings: string[];
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è dataType
    if (rules.dataType !== dataType) {
      errors.push(
        `–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (${rules.dataType}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É —Ç–µ–º–ø–ª–µ–π—Ç–∞ (${dataType})`
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
    if (
      dataType === SpecificationDataType.NUMBER ||
      dataType === SpecificationDataType.FREQUENCY ||
      dataType === SpecificationDataType.MEMORY_SIZE ||
      dataType === SpecificationDataType.POWER_CONSUMPTION
    ) {
      if (rules.minValue !== undefined && rules.maxValue !== undefined) {
        if (rules.minValue >= rules.maxValue) {
          errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ');
        }
      }

      if (rules.minValue !== undefined && rules.minValue < 0) {
        warnings.push('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º');
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è enum —Ç–∏–ø–æ–≤
    if (dataType === SpecificationDataType.ENUM) {
      if (!rules.enumValues || rules.enumValues.length === 0) {
        errors.push('–î–ª—è enum —Ç–∏–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö');
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    if (rules.pattern) {
      try {
        new RegExp(rules.pattern);
      } catch (e) {
        errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ pattern: ${rules.pattern}`);
      }
    }

    return { errors, warnings };
  }

  /**
   * üìù –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ï–ú–ü–õ–ï–ô–¢–ê
   */
  static async updateTemplate(
    templateId: string,
    updates: Partial<Omit<CategorySpecificationTemplate, 'id' | 'category_id'>>
  ): Promise<{
    success: boolean;
    errors?: string[];
    warnings?: string[];
  }> {
    try {
      console.log(`üîÑ Updating template: ${templateId}`);

      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–º–ø–ª–µ–π—Ç
      const { data: currentTemplate, error: fetchError } = await supabase
        .from('category_specification_templates')
        .select('*')
        .eq('id', templateId)
        .single();

      if (fetchError || !currentTemplate) {
        return {
          success: false,
          errors: ['–¢–µ–º–ø–ª–µ–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'],
        };
      }

      // 2. –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const updatedTemplate = { ...currentTemplate, ...updates };
      delete updatedTemplate.id; // –£–±–∏—Ä–∞–µ–º id –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

      // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const validation = this.validateTemplateData(updatedTemplate);
      if (!validation.isValid) {
        return {
          success: false,
          errors: validation.errors,
          warnings: validation.warnings,
        };
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
      if (updates.name && updates.name !== currentTemplate.name) {
        const { data: existingTemplate } = await supabase
          .from('category_specification_templates')
          .select('id')
          .eq('category_id', currentTemplate.category_id)
          .eq('name', updates.name)
          .neq('id', templateId)
          .single();

        if (existingTemplate) {
          return {
            success: false,
            errors: [`–¢–µ–º–ø–ª–µ–π—Ç —Å –∏–º–µ–Ω–µ–º "${updates.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`],
          };
        }
      }

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º–ø–ª–µ–π—Ç
      const { error: updateError } = await supabase
        .from('category_specification_templates')
        .update(updates)
        .eq('id', templateId);

      if (updateError) {
        console.error('‚ùå Template update failed:', updateError);
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–∞: ${updateError.message}`],
        };
      }

      console.log(`‚úÖ Template updated: ${templateId}`);

      return {
        success: true,
        warnings: validation.warnings,
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in updateTemplate:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –¢–ï–ú–ü–õ–ï–ô–¢–ê
   */
  static async deleteTemplate(templateId: string): Promise<{
    success: boolean;
    errors?: string[];
    productsAffected?: number;
  }> {
    try {
      console.log(`üóëÔ∏è Deleting template: ${templateId}`);

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —ç—Ç–∏–º —Ç–µ–º–ø–ª–µ–π—Ç–æ–º
      const { data: productSpecs, error: specsError } = await supabase
        .from('product_specifications')
        .select('id')
        .eq('template_id', templateId);

      if (specsError) {
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${specsError.message}`],
        };
      }

      const productsAffected = productSpecs?.length || 0;

      if (productsAffected > 0) {
        return {
          success: false,
          errors: [
            `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç: –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${productsAffected} —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. ` +
              `–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.`,
          ],
          productsAffected,
        };
      }

      // 2. –£–¥–∞–ª—è–µ–º —Ç–µ–º–ø–ª–µ–π—Ç
      const { error: deleteError } = await supabase
        .from('category_specification_templates')
        .delete()
        .eq('id', templateId);

      if (deleteError) {
        console.error('‚ùå Template deletion failed:', deleteError);
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–∞: ${deleteError.message}`],
        };
      }

      console.log(`‚úÖ Template deleted: ${templateId}`);

      return { success: true };
    } catch (error) {
      console.error('‚ùå Unexpected error in deleteTemplate:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ú–ü–õ–ï–ô–¢–û–í –ö–ê–¢–ï–ì–û–†–ò–ò
   */
  static async getTemplatesForCategory(categoryId: string): Promise<{
    success: boolean;
    templates?: CategorySpecificationTemplate[];
    errors?: string[];
  }> {
    try {
      const { data: templates, error } = await supabase
        .from('category_specification_templates')
        .select('*')
        .eq('category_id', categoryId)
        .order('display_order', { ascending: true });

      if (error) {
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤: ${error.message}`],
        };
      }

      return {
        success: true,
        templates: templates || [],
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in getTemplatesForCategory:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ù–ê–ß–ï–ù–ò–Ø –ü–û –¢–ï–ú–ü–õ–ï–ô–¢–£
   */
  static validateSpecificationValue(
    template: CategorySpecificationTemplate,
    value: any,
    context?: Record<string, any>
  ): SpecificationValidationResult {
    return SpecificationValidator.validateAndNormalize(value, template.validation_rules, context);
  }

  /**
   * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–ï–ú–ü–õ–ï–ô–¢–ê
   */
  static async getTemplateUsageStats(templateId: string): Promise<{
    success: boolean;
    stats?: {
      totalProducts: number;
      uniqueValues: number;
      mostCommonValue?: string;
      lastUsed?: string;
    };
    errors?: string[];
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–º–ø–ª–µ–π—Ç–∞
      const { data: specs, error } = await supabase
        .from('product_specifications')
        .select('value, value_enum, value_text, value_number, created_at')
        .eq('template_id', templateId);

      if (error) {
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`],
        };
      }

      if (!specs || specs.length === 0) {
        return {
          success: true,
          stats: {
            totalProducts: 0,
            uniqueValues: 0,
          },
        };
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
      const values = new Map<string, number>();
      let lastUsed = '';

      specs.forEach(spec => {
        const value =
          spec.value_enum || spec.value_text || spec.value_number?.toString() || spec.value;
        if (value) {
          values.set(value, (values.get(value) || 0) + 1);
        }

        if (spec.created_at > lastUsed) {
          lastUsed = spec.created_at;
        }
      });

      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      let mostCommonValue = '';
      let maxCount = 0;
      for (const [value, count] of values.entries()) {
        if (count > maxCount) {
          maxCount = count;
          mostCommonValue = value;
        }
      }

      return {
        success: true,
        stats: {
          totalProducts: specs.length,
          uniqueValues: values.size,
          mostCommonValue: mostCommonValue || undefined,
          lastUsed: lastUsed || undefined,
        },
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in getTemplateUsageStats:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }
}
