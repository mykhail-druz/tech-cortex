import { supabase } from '@/lib/supabaseClient';
import { Category } from '@/lib/supabase/types/types';
import {
  CategorySpecificationTemplate,
  SpecificationDataType,
  SPECIFICATION_ENUMS,
  SocketType,
  MemoryType,
  ChipsetType,
  FormFactor,
} from '@/lib/supabase/types/specifications';

/**
 * üéØ –°–ï–†–í–ò–° –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
 */
export class CategoryService {
  /**
   * üìù –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –¢–ï–ú–ü–õ–ï–ô–¢–´ –î–õ–Ø PC –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
   */
  private static readonly CATEGORY_TEMPLATES: Record<string, CategorySpecificationTemplate[]> = {
    processors: [
      {
        name: 'socket',
        display_name: '–°–æ–∫–µ—Ç',
        description: '–¢–∏–ø —Å–æ–∫–µ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        data_type: SpecificationDataType.SOCKET,
        enum_values: Object.values(SocketType),
        enum_source: 'SOCKET_TYPE',
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.SOCKET,
          compatibilityKey: true,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 1,
        filter_order: 1,
        filter_type: 'dropdown',
      },
      {
        name: 'base_frequency',
        display_name: '–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞',
        description: '–ë–∞–∑–æ–≤–∞—è —Ç–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        data_type: SpecificationDataType.FREQUENCY,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.FREQUENCY,
          minValue: 1000, // 1 GHz
          maxValue: 8000, // 8 GHz
          unit: 'MHz',
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 2,
        filter_order: 2,
        filter_type: 'range',
      },
      {
        name: 'boost_frequency',
        display_name: '–ß–∞—Å—Ç–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±—É—Å—Ç',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è',
        data_type: SpecificationDataType.FREQUENCY,
        enum_values: [],
        validation_rules: {
          required: false,
          dataType: SpecificationDataType.FREQUENCY,
          minValue: 1000,
          maxValue: 8000,
          unit: 'MHz',
        },
        is_required: false,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 3,
        filter_order: 3,
        filter_type: 'range',
      },
      {
        name: 'cores',
        display_name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä',
        data_type: SpecificationDataType.NUMBER,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.NUMBER,
          minValue: 1,
          maxValue: 64,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 4,
        filter_order: 4,
        filter_type: 'checkbox',
      },
      {
        name: 'threads',
        display_name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤',
        data_type: SpecificationDataType.NUMBER,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.NUMBER,
          minValue: 1,
          maxValue: 128,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 5,
        filter_order: 5,
        filter_type: 'checkbox',
      },
      {
        name: 'tdp',
        display_name: 'TDP',
        description: '–¢–µ–ø–ª–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ (Thermal Design Power)',
        data_type: SpecificationDataType.POWER_CONSUMPTION,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.POWER_CONSUMPTION,
          minValue: 15,
          maxValue: 500,
          unit: 'W',
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true, // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
        display_order: 6,
        filter_order: 6,
        filter_type: 'range',
      },
    ],

    motherboards: [
      {
        name: 'socket',
        display_name: '–°–æ–∫–µ—Ç',
        description: '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ–∫–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        data_type: SpecificationDataType.SOCKET,
        enum_values: Object.values(SocketType),
        enum_source: 'SOCKET_TYPE',
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.SOCKET,
          compatibilityKey: true,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 1,
        filter_order: 1,
        filter_type: 'dropdown',
      },
      {
        name: 'chipset',
        display_name: '–ß–∏–ø—Å–µ—Ç',
        description: '–ß–∏–ø—Å–µ—Ç –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã',
        data_type: SpecificationDataType.CHIPSET,
        enum_values: Object.values(ChipsetType),
        enum_source: 'CHIPSET_TYPE',
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.CHIPSET,
          compatibilityKey: true,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 2,
        filter_order: 2,
        filter_type: 'dropdown',
      },
      {
        name: 'memory_type',
        display_name: '–¢–∏–ø –ø–∞–º—è—Ç–∏',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
        data_type: SpecificationDataType.MEMORY_TYPE,
        enum_values: Object.values(MemoryType),
        enum_source: 'MEMORY_TYPE',
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.MEMORY_TYPE,
          compatibilityKey: true,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 3,
        filter_order: 3,
        filter_type: 'checkbox',
      },
      {
        name: 'memory_slots',
        display_name: '–°–ª–æ—Ç—ã –ø–∞–º—è—Ç–∏',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
        data_type: SpecificationDataType.NUMBER,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.NUMBER,
          minValue: 2,
          maxValue: 8,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 4,
        filter_order: 4,
        filter_type: 'checkbox',
      },
      {
        name: 'max_memory',
        display_name: '–ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
        data_type: SpecificationDataType.MEMORY_SIZE,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.MEMORY_SIZE,
          minValue: 8,
          maxValue: 1024,
          unit: 'GB',
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 5,
        filter_order: 5,
        filter_type: 'range',
      },
      {
        name: 'form_factor',
        display_name: '–§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä',
        description: '–†–∞–∑–º–µ—Ä –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã',
        data_type: SpecificationDataType.ENUM,
        enum_values: Object.values(FormFactor),
        enum_source: 'FORM_FACTOR',
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.ENUM,
          enumValues: Object.values(FormFactor),
          compatibilityKey: true,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 6,
        filter_order: 6,
        filter_type: 'checkbox',
      },
    ],

    memory: [
      {
        name: 'memory_type',
        display_name: '–¢–∏–ø –ø–∞–º—è—Ç–∏',
        description: 'DDR4 –∏–ª–∏ DDR5',
        data_type: SpecificationDataType.MEMORY_TYPE,
        enum_values: Object.values(MemoryType),
        enum_source: 'MEMORY_TYPE',
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.MEMORY_TYPE,
          compatibilityKey: true,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 1,
        filter_order: 1,
        filter_type: 'checkbox',
      },
      {
        name: 'capacity',
        display_name: '–û–±—ä–µ–º',
        description: '–û–±—ä–µ–º –æ–¥–Ω–æ–π –ø–ª–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏',
        data_type: SpecificationDataType.MEMORY_SIZE,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.MEMORY_SIZE,
          minValue: 4,
          maxValue: 128,
          unit: 'GB',
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 2,
        filter_order: 2,
        filter_type: 'checkbox',
      },
      {
        name: 'frequency',
        display_name: '–ß–∞—Å—Ç–æ—Ç–∞',
        description: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø–∞–º—è—Ç–∏',
        data_type: SpecificationDataType.FREQUENCY,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.FREQUENCY,
          minValue: 2133,
          maxValue: 8000,
          unit: 'MHz',
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: true,
        display_order: 3,
        filter_order: 3,
        filter_type: 'checkbox',
      },
      {
        name: 'modules_count',
        display_name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–∫ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ',
        data_type: SpecificationDataType.NUMBER,
        enum_values: [],
        validation_rules: {
          required: true,
          dataType: SpecificationDataType.NUMBER,
          minValue: 1,
          maxValue: 8,
        },
        is_required: true,
        is_filterable: true,
        is_compatibility_key: false,
        display_order: 4,
        filter_order: 4,
        filter_type: 'checkbox',
      },
    ],
  };

  /**
   * ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú–ò –¢–ï–ú–ü–õ–ï–ô–¢–ê–ú–ò
   */
  static async createCategoryWithTemplates(
    categoryData: Omit<Category, 'id' | 'created_at' | 'updated_at'>,
    useStandardTemplates: boolean = true
  ): Promise<{
    success: boolean;
    categoryId?: string;
    templatesCreated?: number;
    errors?: string[];
  }> {
    try {
      console.log(`üèóÔ∏è Creating category: ${categoryData.name} (${categoryData.slug})`);

      // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data: category, error: categoryError } = await supabase
        .from('categories')
        .insert(categoryData)
        .select()
        .single();

      if (categoryError) {
        console.error('‚ùå Category creation failed:', categoryError);
        return {
          success: false,
          errors: [`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryError.message}`],
        };
      }

      console.log(`‚úÖ Category created with ID: ${category.id}`);

      // 2. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–º–ø–ª–µ–π—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      let templatesCreated = 0;
      if (useStandardTemplates && this.CATEGORY_TEMPLATES[categoryData.slug]) {
        const templates = this.CATEGORY_TEMPLATES[categoryData.slug];

        console.log(`üìã Creating ${templates.length} standard templates for ${categoryData.slug}`);

        for (const templateData of templates) {
          const templateWithCategory: Omit<
            CategorySpecificationTemplate,
            'id' | 'created_at' | 'updated_at'
          > = {
            ...templateData,
            category_id: category.id,
          };

          const { error: templateError } = await supabase
            .from('category_specification_templates')
            .insert(templateWithCategory);

          if (templateError) {
            console.error(`‚ùå Template creation failed: ${templateData.name}`, templateError);
          } else {
            templatesCreated++;
            console.log(`‚úÖ Template created: ${templateData.name}`);
          }
        }
      }

      return {
        success: true,
        categoryId: category.id,
        templatesCreated,
      };
    } catch (error) {
      console.error('‚ùå Unexpected error in createCategoryWithTemplates:', error);
      return {
        success: false,
        errors: [`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`],
      };
    }
  }

  /**
   * üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–ù–î–ê–†–¢–ù–´–• –¢–ï–ú–ü–õ–ï–ô–¢–û–í –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
   */
  static getStandardTemplatesForCategory(categorySlug: string): CategorySpecificationTemplate[] {
    return this.CATEGORY_TEMPLATES[categorySlug] || [];
  }

  /**
   * üè∑Ô∏è –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
   */
  static getSupportedCategories(): string[] {
    return Object.keys(this.CATEGORY_TEMPLATES);
  }

  /**
   * ‚ú® –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–û–í–´–• –ö–ê–¢–ï–ì–û–†–ò–ô (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
   */
  static async initializeBasePCCategories(): Promise<{
    success: boolean;
    categoriesCreated: number;
    templatesCreated: number;
    errors: string[];
  }> {
    const baseCategories = [
      {
        name: '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã',
        slug: 'processors',
        description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö',
        is_subcategory: true,
        parent_id: null, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      },
      {
        name: '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã',
        slug: 'motherboards',
        description: '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö',
        is_subcategory: true,
        parent_id: null,
      },
      {
        name: '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å',
        slug: 'memory',
        description: '–ú–æ–¥—É–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ DDR4/DDR5',
        is_subcategory: true,
        parent_id: null,
      },
      {
        name: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
        slug: 'graphics-cards',
        description: '–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
        is_subcategory: true,
        parent_id: null,
      },
      {
        name: '–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è',
        slug: 'power-supplies',
        description: '–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ü–ö',
        is_subcategory: true,
        parent_id: null,
      },
    ];

    let categoriesCreated = 0;
    let templatesCreated = 0;
    const errors: string[] = [];

    for (const categoryData of baseCategories) {
      const result = await this.createCategoryWithTemplates(categoryData, true);

      if (result.success) {
        categoriesCreated++;
        templatesCreated += result.templatesCreated || 0;
      } else {
        errors.push(...(result.errors || []));
      }
    }

    return {
      success: errors.length === 0,
      categoriesCreated,
      templatesCreated,
      errors,
    };
  }
}
