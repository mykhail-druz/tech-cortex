'use client';

import React, { useState, useEffect } from 'react';
import { useToast } from '@/contexts/ToastContext';
import { SmartSpecificationSystem } from '@/lib/specifications/SmartSpecificationSystem';
import {
  SemanticTag,
  StandardSpecification,
  SpecificationDetectionResult
} from '@/lib/supabase/types/semanticTags';
import { SpecificationDataType } from '@/lib/supabase/types/specifications';

interface SmartSpecificationManagerProps {
  categoryId: string;
  categoryName: string;
  categoryDescription?: string;
  onSpecificationsChange?: (specifications: StandardSpecification[]) => void;
}

export default function SmartSpecificationManager({
  categoryId,
  categoryName,
  categoryDescription,
  onSpecificationsChange
}: SmartSpecificationManagerProps) {
  const toast = useToast();
  const [smartSystem] = useState(() => SmartSpecificationSystem.getInstance());
  
  // State
  const [loading, setLoading] = useState(true);
  const [detectionResult, setDetectionResult] = useState<SpecificationDetectionResult | null>(null);
  const [selectedTags, setSelectedTags] = useState<SemanticTag[]>([]);
  const [selectedProfile, setSelectedProfile] = useState<string | null>(null);
  const [autoGeneratedSpecs, setAutoGeneratedSpecs] = useState<StandardSpecification[]>([]);
  const [customSpecs, setCustomSpecs] = useState<StandardSpecification[]>([]);
  const [availableTags, setAvailableTags] = useState<Array<{
    tag: SemanticTag;
    displayName: string;
    description: string;
    category: string;
  }>>([]);
  const [showAddCustomSpec, setShowAddCustomSpec] = useState(false);
  const [newCustomSpec, setNewCustomSpec] = useState({
    name: '',
    displayName: '',
    description: '',
    dataType: SpecificationDataType.TEXT,
    isRequired: false,
    isCompatibilityKey: false
  });

  // Initialize
  useEffect(() => {
    initializeManager();
  }, [categoryId, categoryName]);

  const initializeManager = async () => {
    try {
      setLoading(true);
      
      // Initialize smart system
      await smartSystem.initialize();
      
      // Get available semantic tags
      const tags = smartSystem.getAvailableSemanticTags();
      setAvailableTags(tags);
      
      // Detect profiles for this category
      const result = await smartSystem.detectProfilesForCategory(categoryName, categoryDescription);
      setDetectionResult(result);
      
      // Load existing specifications (skip for new categories)
      if (categoryId !== "new-category-temp") {
        const specs = await smartSystem.getSpecificationsForCategory(categoryId);
        setAutoGeneratedSpecs(specs.autoGenerated);
        setCustomSpecs(specs.custom);
      } else {
        // For new categories, start with empty specifications
        setAutoGeneratedSpecs([]);
        setCustomSpecs([]);
      }
      
      // Set initial selected tags from detection
      if (result.recommendedTags.length > 0) {
        setSelectedTags(result.recommendedTags);
      }
      
      // Set initial selected profile
      if (result.suggestedProfiles.length > 0) {
        setSelectedProfile(result.suggestedProfiles[0].profile.id);
      }
      
    } catch (error) {
      console.error('Failed to initialize SmartSpecificationManager:', error);
      toast.error('Failed to load smart specification system');
    } finally {
      setLoading(false);
    }
  };

  const handleTagToggle = (tag: SemanticTag) => {
    setSelectedTags(prev => 
      prev.includes(tag) 
        ? prev.filter(t => t !== tag)
        : [...prev, tag]
    );
  };

  const handleProfileSelect = async (profileId: string) => {
    try {
      setSelectedProfile(profileId);
      
      const profile = await smartSystem.getProfile(profileId);
      if (profile) {
        setSelectedTags(profile.tags);
        
        // Update auto-generated specs based on profile
        const allSpecs = [...profile.requiredSpecifications, ...profile.optionalSpecifications];
        setAutoGeneratedSpecs(allSpecs.sort((a, b) => a.displayOrder - b.displayOrder));
      }
    } catch (error) {
      console.error('Failed to select profile:', error);
      toast.error('Failed to apply profile');
    }
  };

  const handleApplyProfile = async () => {
    if (!selectedProfile) return;
    
    // Skip database operations for new categories
    if (categoryId === "new-category-temp") {
      toast.info('Profile will be applied when category is created');
      return;
    }
    
    try {
      await smartSystem.applyProfileToCategory(categoryId, selectedProfile, selectedTags);
      
      // Reload specifications
      const specs = await smartSystem.getSpecificationsForCategory(categoryId);
      setAutoGeneratedSpecs(specs.autoGenerated);
      setCustomSpecs(specs.custom);
      
      // Notify parent component
      if (onSpecificationsChange) {
        onSpecificationsChange(specs.all);
      }
      
      toast.success('Profile applied successfully');
    } catch (error) {
      console.error('Failed to apply profile:', error);
      toast.error('Failed to apply profile');
    }
  };

  const handleAddCustomSpec = async () => {
    // Skip database operations for new categories
    if (categoryId === "new-category-temp") {
      toast.info('Custom specification will be added when category is created');
      return;
    }
    
    try {
      const spec: Omit<StandardSpecification, 'displayOrder'> = {
        name: newCustomSpec.name,
        displayName: newCustomSpec.displayName,
        description: newCustomSpec.description,
        dataType: newCustomSpec.dataType,
        validationRule: {
          required: newCustomSpec.isRequired,
          dataType: newCustomSpec.dataType,
          compatibilityKey: newCustomSpec.isCompatibilityKey
        },
        isRequired: newCustomSpec.isRequired,
        isCompatibilityKey: newCustomSpec.isCompatibilityKey,
        filterType: 'search'
      };
      
      await smartSystem.addCustomSpecification(categoryId, spec);
      
      // Reload specifications
      const specs = await smartSystem.getSpecificationsForCategory(categoryId);
      setCustomSpecs(specs.custom);
      
      // Reset form
      setNewCustomSpec({
        name: '',
        displayName: '',
        description: '',
        dataType: 'TEXT',
        isRequired: false,
        isCompatibilityKey: false
      });
      setShowAddCustomSpec(false);
      
      // Notify parent component
      if (onSpecificationsChange) {
        onSpecificationsChange(specs.all);
      }
      
      toast.success('Custom specification added');
    } catch (error) {
      console.error('Failed to add custom specification:', error);
      toast.error('Failed to add custom specification');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        <span className="ml-2">Loading smart specification system...</span>
      </div>
    );
  }

  // Group tags by category
  const tagsByCategory = availableTags.reduce((acc, tagInfo) => {
    if (!acc[tagInfo.category]) {
      acc[tagInfo.category] = [];
    }
    acc[tagInfo.category].push(tagInfo);
    return acc;
  }, {} as Record<string, typeof availableTags>);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          Smart Specification System
        </h3>
        <p className="text-blue-700 text-sm">
          Automatically detect and configure specifications based on semantic tags and component profiles.
        </p>
      </div>

      {/* Profile Detection Results */}
      {detectionResult && detectionResult.suggestedProfiles.length > 0 && (
        <div className="bg-white border border-gray-200 rounded-lg p-4">
          <h4 className="font-semibold text-gray-900 mb-3">Suggested Profiles</h4>
          <div className="space-y-2">
            {detectionResult.suggestedProfiles.map(({ profile, confidence, matchedPatterns, matchedKeywords }) => (
              <div
                key={profile.id}
                className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                  selectedProfile === profile.id
                    ? 'border-primary bg-primary/5'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => handleProfileSelect(profile.id)}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <h5 className="font-medium text-gray-900">{profile.displayName}</h5>
                    <p className="text-sm text-gray-600">{profile.description}</p>
                  </div>
                  <div className="text-right">
                    <div className="text-sm font-medium text-green-600">
                      {Math.round(confidence * 100)}% match
                    </div>
                    <div className="text-xs text-gray-500">
                      {matchedPatterns.length > 0 && `Patterns: ${matchedPatterns.length}`}
                      {matchedKeywords.length > 0 && ` Keywords: ${matchedKeywords.length}`}
                    </div>
                  </div>
                </div>
                
                {/* Profile tags preview */}
                <div className="mt-2 flex flex-wrap gap-1">
                  {profile.tags.slice(0, 5).map(tag => (
                    <span
                      key={tag}
                      className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                    >
                      {tag.replace(/_/g, ' ')}
                    </span>
                  ))}
                  {profile.tags.length > 5 && (
                    <span className="text-xs text-gray-500">+{profile.tags.length - 5} more</span>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          {selectedProfile && (
            <button
              onClick={handleApplyProfile}
              className="mt-3 bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors"
            >
              Apply Selected Profile
            </button>
          )}
        </div>
      )}

      {/* Semantic Tags Selection */}
      <div className="bg-white border border-gray-200 rounded-lg p-4">
        <h4 className="font-semibold text-gray-900 mb-3">Semantic Tags</h4>
        <p className="text-sm text-gray-600 mb-4">
          Select tags that describe the functionality of components in this category.
        </p>
        
        <div className="space-y-4">
          {Object.entries(tagsByCategory).map(([category, tags]) => (
            <div key={category}>
              <h5 className="font-medium text-gray-800 mb-2">{category}</h5>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {tags.map(tagInfo => (
                  <label
                    key={tagInfo.tag}
                    className="flex items-start space-x-2 p-2 rounded border hover:bg-gray-50 cursor-pointer"
                  >
                    <input
                      type="checkbox"
                      checked={selectedTags.includes(tagInfo.tag)}
                      onChange={() => handleTagToggle(tagInfo.tag)}
                      className="mt-1 rounded border-gray-300 text-primary focus:ring-primary"
                    />
                    <div className="flex-1 min-w-0">
                      <div className="text-sm font-medium text-gray-900">
                        {tagInfo.displayName}
                      </div>
                      <div className="text-xs text-gray-500">
                        {tagInfo.description}
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Auto-Generated Specifications */}
      {autoGeneratedSpecs.length > 0 && (
        <div className="bg-white border border-gray-200 rounded-lg p-4">
          <h4 className="font-semibold text-gray-900 mb-3">Auto-Generated Specifications</h4>
          <p className="text-sm text-gray-600 mb-4">
            These specifications are automatically generated based on the selected profile and semantic tags.
          </p>
          
          <div className="space-y-2">
            {autoGeneratedSpecs.map(spec => (
              <div key={spec.name} className="flex items-center justify-between p-2 bg-green-50 border border-green-200 rounded">
                <div>
                  <span className="font-medium text-green-900">{spec.displayName}</span>
                  {spec.description && (
                    <span className="text-sm text-green-700 ml-2">- {spec.description}</span>
                  )}
                </div>
                <div className="flex items-center space-x-2 text-xs text-green-600">
                  {spec.isRequired && <span className="bg-green-200 px-2 py-1 rounded">Required</span>}
                  {spec.isCompatibilityKey && <span className="bg-blue-200 px-2 py-1 rounded">Compatibility</span>}
                  <span className="bg-gray-200 px-2 py-1 rounded">{spec.dataType}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Custom Specifications */}
      <div className="bg-white border border-gray-200 rounded-lg p-4">
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-semibold text-gray-900">Custom Specifications</h4>
          <button
            onClick={() => setShowAddCustomSpec(true)}
            className="bg-gray-100 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-200 transition-colors"
          >
            Add Custom Spec
          </button>
        </div>
        
        {customSpecs.length > 0 ? (
          <div className="space-y-2">
            {customSpecs.map(spec => (
              <div key={spec.name} className="flex items-center justify-between p-2 bg-blue-50 border border-blue-200 rounded">
                <div>
                  <span className="font-medium text-blue-900">{spec.displayName}</span>
                  {spec.description && (
                    <span className="text-sm text-blue-700 ml-2">- {spec.description}</span>
                  )}
                </div>
                <div className="flex items-center space-x-2 text-xs text-blue-600">
                  {spec.isRequired && <span className="bg-blue-200 px-2 py-1 rounded">Required</span>}
                  {spec.isCompatibilityKey && <span className="bg-purple-200 px-2 py-1 rounded">Compatibility</span>}
                  <span className="bg-gray-200 px-2 py-1 rounded">{spec.dataType}</span>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-sm text-gray-500">No custom specifications added yet.</p>
        )}
      </div>

      {/* Add Custom Specification Modal */}
      {showAddCustomSpec && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Add Custom Specification</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Internal Name
                </label>
                <input
                  type="text"
                  value={newCustomSpec.name}
                  onChange={(e) => setNewCustomSpec(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                  placeholder="e.g., custom_feature"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Display Name
                </label>
                <input
                  type="text"
                  value={newCustomSpec.displayName}
                  onChange={(e) => setNewCustomSpec(prev => ({ ...prev, displayName: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                  placeholder="e.g., Custom Feature"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  value={newCustomSpec.description}
                  onChange={(e) => setNewCustomSpec(prev => ({ ...prev, description: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                  rows={2}
                  placeholder="Description of this specification"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Data Type
                </label>
                <select
                  value={newCustomSpec.dataType}
                  onChange={(e) => setNewCustomSpec(prev => ({ ...prev, dataType: e.target.value as SpecificationDataType }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                >
                  <option value={SpecificationDataType.TEXT}>Text</option>
                  <option value={SpecificationDataType.NUMBER}>Number</option>
                  <option value={SpecificationDataType.BOOLEAN}>Boolean</option>
                  <option value={SpecificationDataType.ENUM}>Enum</option>
                </select>
              </div>
              
              <div className="flex items-center space-x-4">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={newCustomSpec.isRequired}
                    onChange={(e) => setNewCustomSpec(prev => ({ ...prev, isRequired: e.target.checked }))}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="ml-2 text-sm text-gray-700">Required</span>
                </label>
                
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={newCustomSpec.isCompatibilityKey}
                    onChange={(e) => setNewCustomSpec(prev => ({ ...prev, isCompatibilityKey: e.target.checked }))}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="ml-2 text-sm text-gray-700">Compatibility Key</span>
                </label>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowAddCustomSpec(false)}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleAddCustomSpec}
                disabled={!newCustomSpec.name || !newCustomSpec.displayName}
                className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Add Specification
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}